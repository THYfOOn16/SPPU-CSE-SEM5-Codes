-- Create the database
CREATE DATABASE InstituteDB;

-- Use the newly created database
USE InstituteDB;

-- Create 'inst' table
CREATE TABLE inst (
    inst_id INT(10),
    inst_name VARCHAR(20),
    inst_salary DECIMAL(20, 2)
);

-- Create 'department' table
CREATE TABLE department (
    dept_id INT(10),
    dept_name VARCHAR(20),
    inst_id INT(10)
);

-- Insert values into 'inst' table
INSERT INTO inst VALUES 
    (1, 'Prachi', 50000),
    (2, 'Apurva', 51000),
    (3, 'Sayali', 52000),
    (4, 'Sakshi', 55000),
    (5, 'Tanaya', 40000),
    (6, 'Aarya', 30000),
    (7, 'Rutuja', 60000),
    (8, 'Aakansha', 40000),
    (9, 'Tahseen', 45000),
    (10, 'Apurva', 50000),
    (11, 'Kanishka', 20000),
    (12, 'Aditi', 45000),
    (13, 'Shubham', 30000);

-- Insert values into 'department' table
INSERT INTO department VALUES 
    (111, 'Computer', 1),
    (222, 'IT', 2),
    (333, 'Electrical', 3),
    (444, 'Mechanical', 4),
    (555, 'Civil', 5),
    (666, 'AIML', 6),
    (777, 'AIDS', 7),
    (888, 'ECE', 8),
    (999, 'ENTC', 9);

-- Query to view all records in 'inst' table
SELECT * FROM inst;

-- Query to view all records in 'department' table
SELECT * FROM department;

-- INNER JOIN to show matching records in both tables
SELECT * FROM inst INNER JOIN department ON inst.inst_id = department.inst_id;

-- LEFT JOIN to show all records from 'inst' and matching from 'department'
SELECT * FROM inst LEFT JOIN department ON inst.inst_id = department.inst_id;

-- RIGHT JOIN to show all records from 'department' and matching from 'inst'
SELECT * FROM department RIGHT JOIN inst ON inst.inst_id = department.inst_id;

-- FULL OUTER JOIN using UNION of LEFT and RIGHT JOIN
SELECT * FROM inst LEFT JOIN department ON inst.inst_id = department.inst_id
UNION
SELECT * FROM inst RIGHT JOIN department ON inst.inst_id = department.inst_id;

-- Query to find instructor with the highest salary
SELECT inst_name FROM inst WHERE inst_salary = (SELECT MAX(inst_salary) FROM inst);

-- Query to find instructors associated with a department
SELECT inst_name FROM inst WHERE inst_id IN (SELECT inst_id FROM department);

-- Create a view 'inst_view' for instructors with salary > 50000
CREATE VIEW inst_view AS SELECT inst_name, inst_salary FROM inst WHERE inst_salary > 50000;

-- Query to view the 'inst_view'
SELECT * FROM inst_view;

-- Update salary directly in 'inst' table since views are non-updatable in MySQL
UPDATE inst SET inst_salary = 55000 WHERE inst_name = 'Sakshi';

-- Query to view updated 'inst_view'
SELECT * FROM inst_view;

-- Recreate the view with different conditions
CREATE OR REPLACE VIEW inst_view AS SELECT inst_id, inst_name, inst_salary FROM inst WHERE inst_salary > 40000;

-- Query to view the modified 'inst_view'
SELECT * FROM inst_view;

-- Additional queries for analysis
SELECT DISTINCT dept_name FROM department;

SELECT AVG(inst_salary) AS avg_salary FROM inst;

SELECT COUNT(inst_name) FROM inst INNER JOIN department ON inst.inst_id = department.inst_id WHERE dept_name = 'IT';

SELECT COUNT(inst_id) FROM department WHERE dept_name = 'IT';

SELECT SUM(inst_salary) AS total_salary FROM inst INNER JOIN department ON inst.inst_id = department.inst_id WHERE dept_name = 'Computer';

SELECT SUM(inst_salary) AS total_salary FROM inst;
