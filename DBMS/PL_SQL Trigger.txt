-- Create the database
CREATE DATABASE prac8;
USE prac8;

-- Create the main Library table
CREATE TABLE Library (
    book_id INT PRIMARY KEY,
    title VARCHAR(200),
    author VARCHAR(100),
    status VARCHAR(50),
    issued_to INT,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the audit table
CREATE TABLE Library_Audit (
    audit_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    action_type VARCHAR(20),
    old_title VARCHAR(200),
    old_author VARCHAR(100),
    old_status VARCHAR(50),
    old_issued_to INT,
    changed_by VARCHAR(100),
    change_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DELIMITER $$

-- 1. BEFORE UPDATE Trigger (Row Level)
CREATE TRIGGER before_library_update
BEFORE UPDATE ON Library
FOR EACH ROW
BEGIN
    -- Validate new status
    IF NEW.status NOT IN ('Available', 'Issued', 'Lost', 'Under Repair') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid book status. Allowed values are: Available, Issued, Lost, Under Repair';
    END IF;
   
    -- Set last updated timestamp
    SET NEW.last_updated = CURRENT_TIMESTAMP;
END $$

-- 2. AFTER UPDATE Trigger (Row Level)
CREATE TRIGGER after_library_update
AFTER UPDATE ON Library
FOR EACH ROW
BEGIN
    -- Insert old values into audit table
    INSERT INTO Library_Audit (
        book_id,
        action_type,
        old_title,
        old_author,
        old_status,
        old_issued_to,
        changed_by
    )
    VALUES (
        OLD.book_id,
        'UPDATE',
        OLD.title,
        OLD.author,
        OLD.status,
        OLD.issued_to,
        CURRENT_USER()
    );
END $$

-- 3. BEFORE DELETE Trigger (Row Level)
CREATE TRIGGER before_library_delete
BEFORE DELETE ON Library
FOR EACH ROW
BEGIN
    -- Validate if book can be deleted
    IF OLD.status = 'Issued' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot delete a book that is currently issued';
    END IF;
END $$

-- 4. AFTER DELETE Trigger (Row Level)
CREATE TRIGGER after_library_delete
AFTER DELETE ON Library
FOR EACH ROW
BEGIN
    -- Insert deleted record into audit table
    INSERT INTO Library_Audit (
        book_id,
        action_type,
        old_title,
        old_author,
        old_status,
        old_issued_to,
        changed_by
    )
    VALUES (
        OLD.book_id,
        'DELETE',
        OLD.title,
        OLD.author,
        OLD.status,
        OLD.issued_to,
        CURRENT_USER()
    );
END $$

-- 5. BEFORE INSERT Trigger (Row Level)
CREATE TRIGGER before_library_insert
BEFORE INSERT ON Library
FOR EACH ROW
BEGIN
    -- Set default status if not provided
    IF NEW.status IS NULL THEN
        SET NEW.status = 'Available';
    END IF;
   
    -- Validate status
    IF NEW.status NOT IN ('Available', 'Issued', 'Lost', 'Under Repair') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid book status. Allowed values are: Available, Issued, Lost, Under Repair';
    END IF;
END $$

DELIMITER ;

-- 1. Insert test data
INSERT INTO Library (book_id, title, author, status) VALUES
(1, 'Database Management', 'John Doe', 'Available'),
(2, 'Python Programming', 'Jane Smith', 'Available'),
(3, 'Web Development', 'Bob Wilson', 'Available');

-- 2. Test UPDATE trigger
UPDATE Library
SET status = 'Issued', issued_to = 101
WHERE book_id = 1;

-- 3. Test DELETE trigger
DELETE FROM Library WHERE book_id = 2;

-- 4. Test invalid status (should fail)
UPDATE Library
SET status = 'Invalid Status'
WHERE book_id = 3;

-- 5. Test deletion of issued book (should fail)
DELETE FROM Library WHERE book_id = 1;

-- Check audit records
SELECT * FROM Library_Audit ORDER BY audit_id DESC;
